AWSTemplateFormatVersion: 2010-09-09
Resources:
  CloudMap:
    Properties:
      Description: Service Map for Docker Compose project test-project
      Name: test-project.local
      Vpc: vpc-cf7ca5a9
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
  Cluster:
    Properties:
      ClusterName: test-project
      Tags:
        - Key: com.docker.compose.project
          Value: test-project
    Type: AWS::ECS::Cluster
  DbService:
    DependsOn:
      - PostgresdataNFSMountTargetOnSubnet90de55f6
      - PostgresdataNFSMountTargetOnSubnet87298ddd
    Properties:
      Cluster:
        Fn::GetAtt:
          - Cluster
          - Arn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - Ref: GrouparoobackendNetwork
          Subnets:
            - subnet-90de55f6
            - subnet-87298ddd
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
        - RegistryArn:
            Fn::GetAtt:
              - DbServiceDiscoveryEntry
              - Arn
      Tags:
        - Key: com.docker.compose.project
          Value: test-project
        - Key: com.docker.compose.service
          Value: db
      TaskDefinition:
        Ref: DbTaskDefinition
    Type: AWS::ECS::Service
  DbServiceDiscoveryEntry:
    Properties:
      Description: '"db" service discovery entry in Cloud Map'
      DnsConfig:
        DnsRecords:
          - TTL: 60
            Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: db
      NamespaceId:
        Ref: CloudMap
    Type: AWS::ServiceDiscovery::Service
  DbTaskDefinition:
    Properties:
      ContainerDefinitions:
        - Command:
            - us-west-1.compute.internal
            - test-project.local
          Essential: false
          Image: docker/ecs-searchdomain-sidecar:1.0
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: LogGroup
              awslogs-region:
                Ref: AWS::Region
              awslogs-stream-prefix: test-project
          Name: Db_ResolvConf_InitContainer
        - DependsOn:
            - Condition: SUCCESS
              ContainerName: Db_ResolvConf_InitContainer
          Environment:
            - Name: POSTGRES_DB
              Value: grouparoo_docker
            - Name: POSTGRES_PASSWORD
              Value: password
          Essential: true
          Image: docker.io/library/postgres:latest@sha256:6647385dd9ae11aa2216bf55c54d126b0a85637b3cf4039ef24e3234113588e3
          LinuxParameters: {}
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: LogGroup
              awslogs-region:
                Ref: AWS::Region
              awslogs-stream-prefix: test-project
          MountPoints:
            - ContainerPath: /var/lib/postgresql/data
              SourceVolume: postgres-data
          Name: db
      Cpu: "256"
      ExecutionRoleArn:
        Ref: DbTaskExecutionRole
      Family: test-project-db
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn:
        Ref: DbTaskRole
      Volumes:
        - EFSVolumeConfiguration:
            AuthorizationConfig:
              AccessPointId:
                Ref: PostgresdataAccessPoint
              IAM: ENABLED
            FilesystemId: fs-02cb391a
            TransitEncryption: ENABLED
          Name: postgres-data
    Type: AWS::ECS::TaskDefinition
  DbTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Condition: {}
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags:
        - Key: com.docker.compose.project
          Value: test-project
        - Key: com.docker.compose.service
          Value: db
    Type: AWS::IAM::Role
  DbTaskRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Condition: {}
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - elasticfilesystem:ClientMount
                  - elasticfilesystem:ClientWrite
                  - elasticfilesystem:ClientRootAccess
                Condition:
                  StringEquals:
                    elasticfilesystem:AccessPointArn:
                      Ref: PostgresdataAccessPoint
                Effect: Allow
                Principal: {}
                Resource:
                  - arn:aws:elasticfilesystem:us-west-1:982848192314:file-system/fs-02cb391a
            Version: 2012-10-17
          PolicyName: DbPostgresdataVolumeMountPolicy
      Tags:
        - Key: com.docker.compose.project
          Value: test-project
        - Key: com.docker.compose.service
          Value: db
    Type: AWS::IAM::Role
  DefaultNetwork:
    Properties:
      GroupDescription: test-project Security Group for default network
      Tags:
        - Key: com.docker.compose.project
          Value: test-project
        - Key: com.docker.compose.network
          Value: test-project_default
      VpcId: vpc-cf7ca5a9
    Type: AWS::EC2::SecurityGroup
  DefaultNetworkIngress:
    Properties:
      Description: Allow communication within network default
      GroupId:
        Ref: DefaultNetwork
      IpProtocol: "-1"
      SourceSecurityGroupId:
        Ref: DefaultNetwork
    Type: AWS::EC2::SecurityGroupIngress
  Grouparoobackend3000Ingress:
    Properties:
      CidrIp: 0.0.0.0/0
      Description: grouparoo-web:3000/ on grouparoo_backend network
      FromPort: 3000
      GroupId:
        Ref: GrouparoobackendNetwork
      IpProtocol: "-1"
      ToPort: 3000
    Type: AWS::EC2::SecurityGroupIngress
  GrouparoobackendNetwork:
    Properties:
      GroupDescription: test-project Security Group for grouparoo_backend network
      Tags:
        - Key: com.docker.compose.project
          Value: test-project
        - Key: com.docker.compose.network
          Value: test-project_grouparoo_backend
      VpcId: vpc-cf7ca5a9
    Type: AWS::EC2::SecurityGroup
  GrouparoobackendNetworkIngress:
    Properties:
      Description: Allow communication within network grouparoo_backend
      GroupId:
        Ref: GrouparoobackendNetwork
      IpProtocol: "-1"
      SourceSecurityGroupId:
        Ref: GrouparoobackendNetwork
    Type: AWS::EC2::SecurityGroupIngress
  Grouparoofrontend3000Ingress:
    Properties:
      CidrIp: 0.0.0.0/0
      Description: grouparoo-web:3000/ on grouparoo_frontend network
      FromPort: 3000
      GroupId:
        Ref: GrouparoofrontendNetwork
      IpProtocol: "-1"
      ToPort: 3000
    Type: AWS::EC2::SecurityGroupIngress
  GrouparoofrontendNetwork:
    Properties:
      GroupDescription: test-project Security Group for grouparoo_frontend network
      Tags:
        - Key: com.docker.compose.project
          Value: test-project
        - Key: com.docker.compose.network
          Value: test-project_grouparoo_frontend
      VpcId: vpc-cf7ca5a9
    Type: AWS::EC2::SecurityGroup
  GrouparoofrontendNetworkIngress:
    Properties:
      Description: Allow communication within network grouparoo_frontend
      GroupId:
        Ref: GrouparoofrontendNetwork
      IpProtocol: "-1"
      SourceSecurityGroupId:
        Ref: GrouparoofrontendNetwork
    Type: AWS::EC2::SecurityGroupIngress
  Grouparooweb3000Listener:
    Properties:
      DefaultActions:
        - ForwardConfig:
            TargetGroups:
              - TargetGroupArn:
                  Ref: Grouparooweb3000TargetGroup
          Type: forward
      LoadBalancerArn:
        Ref: LoadBalancer
      Port: 3000
      Protocol: HTTP
    Type: AWS::ElasticLoadBalancingV2::Listener
  Grouparooweb3000TargetGroup:
    Properties:
      Port: 3000
      Protocol: HTTP
      Tags:
        - Key: com.docker.compose.project
          Value: test-project
      TargetType: ip
      VpcId: vpc-cf7ca5a9
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
  GrouparoowebService:
    DependsOn:
      - Grouparooweb3000Listener
      - DbService
      - RedisService
    Properties:
      Cluster:
        Fn::GetAtt:
          - Cluster
          - Arn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: grouparoo-web
          ContainerPort: 3000
          TargetGroupArn:
            Ref: Grouparooweb3000TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - Ref: GrouparoofrontendNetwork
            - Ref: GrouparoobackendNetwork
          Subnets:
            - subnet-90de55f6
            - subnet-87298ddd
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
        - RegistryArn:
            Fn::GetAtt:
              - GrouparoowebServiceDiscoveryEntry
              - Arn
      Tags:
        - Key: com.docker.compose.project
          Value: test-project
        - Key: com.docker.compose.service
          Value: grouparoo-web
      TaskDefinition:
        Ref: GrouparoowebTaskDefinition
    Type: AWS::ECS::Service
  GrouparoowebServiceDiscoveryEntry:
    Properties:
      Description: '"grouparoo-web" service discovery entry in Cloud Map'
      DnsConfig:
        DnsRecords:
          - TTL: 60
            Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: grouparoo-web
      NamespaceId:
        Ref: CloudMap
    Type: AWS::ServiceDiscovery::Service
  GrouparoowebTaskDefinition:
    Properties:
      ContainerDefinitions:
        - Command:
            - us-west-1.compute.internal
            - test-project.local
          Essential: false
          Image: docker/ecs-searchdomain-sidecar:1.0
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: LogGroup
              awslogs-region:
                Ref: AWS::Region
              awslogs-stream-prefix: test-project
          Name: Grouparooweb_ResolvConf_InitContainer
        - DependsOn:
            - Condition: SUCCESS
              ContainerName: Grouparooweb_ResolvConf_InitContainer
          Environment:
            - Name: DATABASE_URL
              Value: postgresql://postgres:password@db:5432/grouparoo_docker
            - Name: PORT
              Value: "3000"
            - Name: REDIS_URL
              Value: redis://redis:6379/0
            - Name: SERVER_TOKEN
              Value: default-server-token
            - Name: WEB_SERVER
              Value: "true"
            - Name: WORKERS
              Value: "0"
          Essential: true
          Image: 982848192314.dkr.ecr.us-west-1.amazonaws.com/grouparoo:latest@sha256:58a7837bca1e057f8fadc2cc544b756b984377ba48186d95e4041413f5d73899
          LinuxParameters: {}
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: LogGroup
              awslogs-region:
                Ref: AWS::Region
              awslogs-stream-prefix: test-project
          Name: grouparoo-web
          PortMappings:
            - ContainerPort: 3000
              HostPort: 3000
      Cpu: "256"
      ExecutionRoleArn:
        Ref: GrouparoowebTaskExecutionRole
      Family: test-project-grouparoo-web
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
    Type: AWS::ECS::TaskDefinition
  GrouparoowebTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Condition: {}
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags:
        - Key: com.docker.compose.project
          Value: test-project
        - Key: com.docker.compose.service
          Value: grouparoo-web
    Type: AWS::IAM::Role
  GrouparooworkerService:
    DependsOn:
      - DbService
      - RedisService
      - GrouparoowebService
    Properties:
      Cluster:
        Fn::GetAtt:
          - Cluster
          - Arn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - Ref: GrouparoofrontendNetwork
            - Ref: GrouparoobackendNetwork
          Subnets:
            - subnet-90de55f6
            - subnet-87298ddd
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
        - RegistryArn:
            Fn::GetAtt:
              - GrouparooworkerServiceDiscoveryEntry
              - Arn
      Tags:
        - Key: com.docker.compose.project
          Value: test-project
        - Key: com.docker.compose.service
          Value: grouparoo-worker
      TaskDefinition:
        Ref: GrouparooworkerTaskDefinition
    Type: AWS::ECS::Service
  GrouparooworkerServiceDiscoveryEntry:
    Properties:
      Description: '"grouparoo-worker" service discovery entry in Cloud Map'
      DnsConfig:
        DnsRecords:
          - TTL: 60
            Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: grouparoo-worker
      NamespaceId:
        Ref: CloudMap
    Type: AWS::ServiceDiscovery::Service
  GrouparooworkerTaskDefinition:
    Properties:
      ContainerDefinitions:
        - Command:
            - us-west-1.compute.internal
            - test-project.local
          Essential: false
          Image: docker/ecs-searchdomain-sidecar:1.0
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: LogGroup
              awslogs-region:
                Ref: AWS::Region
              awslogs-stream-prefix: test-project
          Name: Grouparooworker_ResolvConf_InitContainer
        - DependsOn:
            - Condition: SUCCESS
              ContainerName: Grouparooworker_ResolvConf_InitContainer
          Environment:
            - Name: DATABASE_URL
              Value: postgresql://postgres:password@db:5432/grouparoo_docker
            - Name: REDIS_URL
              Value: redis://redis:6379/0
            - Name: SERVER_TOKEN
              Value: default-server-token
            - Name: WEB_SERVER
              Value: "false"
            - Name: WORKERS
              Value: "10"
          Essential: true
          Image: 982848192314.dkr.ecr.us-west-1.amazonaws.com/grouparoo:latest@sha256:58a7837bca1e057f8fadc2cc544b756b984377ba48186d95e4041413f5d73899
          LinuxParameters: {}
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: LogGroup
              awslogs-region:
                Ref: AWS::Region
              awslogs-stream-prefix: test-project
          Name: grouparoo-worker
      Cpu: "256"
      ExecutionRoleArn:
        Ref: GrouparooworkerTaskExecutionRole
      Family: test-project-grouparoo-worker
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
    Type: AWS::ECS::TaskDefinition
  GrouparooworkerTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Condition: {}
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags:
        - Key: com.docker.compose.project
          Value: test-project
        - Key: com.docker.compose.service
          Value: grouparoo-worker
    Type: AWS::IAM::Role
  LoadBalancer:
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - Ref: GrouparoofrontendNetwork
        - Ref: GrouparoobackendNetwork
        - Ref: DefaultNetwork
      Subnets:
        - subnet-90de55f6
        - subnet-87298ddd
      Tags:
        - Key: com.docker.compose.project
          Value: test-project
      Type: application
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  LogGroup:
    Properties:
      LogGroupName: /docker-compose/test-project
    Type: AWS::Logs::LogGroup
  PostgresdataAccessPoint:
    Properties:
      AccessPointTags:
        - Key: com.docker.compose.project
          Value: test-project
        - Key: com.docker.compose.volume
          Value: postgres-data
        - Key: Name
          Value: test-project_postgres-data
      FileSystemId: fs-02cb391a
    Type: AWS::EFS::AccessPoint
  PostgresdataNFSMountTargetOnSubnet90de55f6:
    Properties:
      FileSystemId: fs-02cb391a
      SecurityGroups:
        - Ref: DefaultNetwork
        - Ref: GrouparoofrontendNetwork
        - Ref: GrouparoobackendNetwork
      SubnetId: subnet-90de55f6
    Type: AWS::EFS::MountTarget
  PostgresdataNFSMountTargetOnSubnet87298ddd:
    Properties:
      FileSystemId: fs-02cb391a
      SecurityGroups:
        - Ref: DefaultNetwork
        - Ref: GrouparoofrontendNetwork
        - Ref: GrouparoobackendNetwork
      SubnetId: subnet-87298ddd
    Type: AWS::EFS::MountTarget
  RedisService:
    Properties:
      Cluster:
        Fn::GetAtt:
          - Cluster
          - Arn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - Ref: GrouparoobackendNetwork
          Subnets:
            - subnet-90de55f6
            - subnet-87298ddd
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
        - RegistryArn:
            Fn::GetAtt:
              - RedisServiceDiscoveryEntry
              - Arn
      Tags:
        - Key: com.docker.compose.project
          Value: test-project
        - Key: com.docker.compose.service
          Value: redis
      TaskDefinition:
        Ref: RedisTaskDefinition
    Type: AWS::ECS::Service
  RedisServiceDiscoveryEntry:
    Properties:
      Description: '"redis" service discovery entry in Cloud Map'
      DnsConfig:
        DnsRecords:
          - TTL: 60
            Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: redis
      NamespaceId:
        Ref: CloudMap
    Type: AWS::ServiceDiscovery::Service
  RedisTaskDefinition:
    Properties:
      ContainerDefinitions:
        - Command:
            - us-west-1.compute.internal
            - test-project.local
          Essential: false
          Image: docker/ecs-searchdomain-sidecar:1.0
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: LogGroup
              awslogs-region:
                Ref: AWS::Region
              awslogs-stream-prefix: test-project
          Name: Redis_ResolvConf_InitContainer
        - DependsOn:
            - Condition: SUCCESS
              ContainerName: Redis_ResolvConf_InitContainer
          Essential: true
          Image: docker.io/library/redis:latest@sha256:cd0c68c5479f2db4b9e2c5fbfdb7a8acb77625322dd5b474578515422d3ddb59
          LinuxParameters: {}
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: LogGroup
              awslogs-region:
                Ref: AWS::Region
              awslogs-stream-prefix: test-project
          Name: redis
      Cpu: "256"
      ExecutionRoleArn:
        Ref: RedisTaskExecutionRole
      Family: test-project-redis
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
    Type: AWS::ECS::TaskDefinition
  RedisTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Condition: {}
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags:
        - Key: com.docker.compose.project
          Value: test-project
        - Key: com.docker.compose.service
          Value: redis
    Type: AWS::IAM::Role
